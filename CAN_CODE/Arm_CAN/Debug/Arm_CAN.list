
Arm_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  080051e0  080051e0  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e0  080051e0  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080051e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000020  08005204  00007020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005204  000071a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b562  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d84  00000000  00000000  000125a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00014330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093b  00000000  00000000  00014f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018340  00000000  00000000  00015863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd35  00000000  00000000  0002dba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc7c  00000000  00000000  0003a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca554  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  000ca598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cda70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080051a4 	.word	0x080051a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080051a4 	.word	0x080051a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <__aeabi_f2uiz>:
 8000fc0:	0042      	lsls	r2, r0, #1
 8000fc2:	d20e      	bcs.n	8000fe2 <__aeabi_f2uiz+0x22>
 8000fc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fc8:	d30b      	bcc.n	8000fe2 <__aeabi_f2uiz+0x22>
 8000fca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd2:	d409      	bmi.n	8000fe8 <__aeabi_f2uiz+0x28>
 8000fd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fdc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2uiz+0x32>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d102      	bne.n	8000ff8 <__aeabi_f2uiz+0x38>
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <rounding>:
float current_sum = 0.0;
int counter = 0;

volatile uint16_t ADC_VAL;

float rounding(float x) {
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
   float frac = (x*100 - (int)(x*100))/100;
 8001008:	4913      	ldr	r1, [pc, #76]	@ (8001058 <rounding+0x58>)
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fdec 	bl	8000be8 <__aeabi_fmul>
 8001010:	4603      	mov	r3, r0
 8001012:	461c      	mov	r4, r3
 8001014:	4910      	ldr	r1, [pc, #64]	@ (8001058 <rounding+0x58>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fde6 	bl	8000be8 <__aeabi_fmul>
 800101c:	4603      	mov	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ffa8 	bl	8000f74 <__aeabi_f2iz>
 8001024:	4603      	mov	r3, r0
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd8a 	bl	8000b40 <__aeabi_i2f>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fccf 	bl	80009d4 <__aeabi_fsub>
 8001036:	4603      	mov	r3, r0
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <rounding+0x58>)
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe88 	bl	8000d50 <__aeabi_fdiv>
 8001040:	4603      	mov	r3, r0
 8001042:	60fb      	str	r3, [r7, #12]
   return x - frac; //xx.xx value
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fcc4 	bl	80009d4 <__aeabi_fsub>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	bf00      	nop
 8001058:	42c80000 	.word	0x42c80000
 800105c:	00000000 	.word	0x00000000

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fef0 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f938 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 faec 	bl	800164c <MX_GPIO_Init>
  MX_CAN_Init();
 8001074:	f000 f9ce 	bl	8001414 <MX_CAN_Init>
  MX_TIM4_Init();
 8001078:	f000 fa94 	bl	80015a4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800107c:	f000 fa1e 	bl	80014bc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001080:	f000 f98a 	bl	8001398 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8001084:	4886      	ldr	r0, [pc, #536]	@ (80012a0 <main+0x240>)
 8001086:	f001 fc4c 	bl	8002922 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800108a:	2110      	movs	r1, #16
 800108c:	4884      	ldr	r0, [pc, #528]	@ (80012a0 <main+0x240>)
 800108e:	f001 fe7c 	bl	8002d8a <HAL_CAN_ActivateNotification>

  //start PWM mode for the motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001092:	210c      	movs	r1, #12
 8001094:	4883      	ldr	r0, [pc, #524]	@ (80012a4 <main+0x244>)
 8001096:	f003 f8c1 	bl	800421c <HAL_TIM_PWM_Start>
  TIM2->CCR4=0; //set initial PWM value as zero
 800109a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800109e:	2200      	movs	r2, #0
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin,DIR); //set the initial value of DIR
 80010a2:	4b81      	ldr	r3, [pc, #516]	@ (80012a8 <main+0x248>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	2110      	movs	r1, #16
 80010aa:	4880      	ldr	r0, [pc, #512]	@ (80012ac <main+0x24c>)
 80010ac:	f002 fb48 	bl	8003740 <HAL_GPIO_WritePin>
  //start TIM4 in encoder mode to read the encoder pulses in 4x mode
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010b0:	213c      	movs	r1, #60	@ 0x3c
 80010b2:	487f      	ldr	r0, [pc, #508]	@ (80012b0 <main+0x250>)
 80010b4:	f003 f9f6 	bl	80044a4 <HAL_TIM_Encoder_Start>

  //reset the encoders at the start
  resetEncoder();
 80010b8:	f000 fcc6 	bl	8001a48 <resetEncoder>

  //Current sensor interrupt start:
  HAL_ADC_Start_IT(&hadc1); //start with interrupts
 80010bc:	487d      	ldr	r0, [pc, #500]	@ (80012b4 <main+0x254>)
 80010be:	f001 f823 	bl	8002108 <HAL_ADC_Start_IT>

  TxHeader.IDE=CAN_ID_STD;
 80010c2:	4b7d      	ldr	r3, [pc, #500]	@ (80012b8 <main+0x258>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 80010c8:	4b7b      	ldr	r3, [pc, #492]	@ (80012b8 <main+0x258>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=SLAVE_ID; // ID of this CAN node
 80010ce:	4b7a      	ldr	r3, [pc, #488]	@ (80012b8 <main+0x258>)
 80010d0:	f240 2256 	movw	r2, #598	@ 0x256
 80010d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float Voltage_Div = 1.5;
 80010d6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80010da:	60bb      	str	r3, [r7, #8]

  while (1)
  {

	  HAL_Delay(5);
 80010dc:	2005      	movs	r0, #5
 80010de:	f000 ff17 	bl	8001f10 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e2:	b672      	cpsid	i
}
 80010e4:	bf00      	nop

	  __disable_irq(); //disable interrupt
	  HAL_Delay(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 ff12 	bl	8001f10 <HAL_Delay>

	  float voltage = ((ADC_VAL + 69.631)/(1249.362)) * Voltage_Div - offset;
 80010ec:	4b73      	ldr	r3, [pc, #460]	@ (80012bc <main+0x25c>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f97e 	bl	80003f4 <__aeabi_i2d>
 80010f8:	a361      	add	r3, pc, #388	@ (adr r3, 8001280 <main+0x220>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f82d 	bl	800015c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001288 <main+0x228>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fb04 	bl	800071c <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4692      	mov	sl, r2
 800111a:	469b      	mov	fp, r3
 800111c:	68b8      	ldr	r0, [r7, #8]
 800111e:	f7ff f97b 	bl	8000418 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4650      	mov	r0, sl
 8001128:	4659      	mov	r1, fp
 800112a:	f7ff f9cd 	bl	80004c8 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a356      	add	r3, pc, #344	@ (adr r3, 8001290 <main+0x230>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff f80c 	bl	8000158 <__aeabi_dsub>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fbf0 	bl	800092c <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	607b      	str	r3, [r7, #4]
	  float current = ((voltage)/slope);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f961 	bl	8000418 <__aeabi_f2d>
 8001156:	a350      	add	r3, pc, #320	@ (adr r3, 8001298 <main+0x238>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fade 	bl	800071c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fbe0 	bl	800092c <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	603b      	str	r3, [r7, #0]

	  current_sum += current;
 8001170:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <main+0x260>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fc2e 	bl	80009d8 <__addsf3>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b4f      	ldr	r3, [pc, #316]	@ (80012c0 <main+0x260>)
 8001182:	601a      	str	r2, [r3, #0]
	  adc_sum += ADC_VAL;
 8001184:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <main+0x25c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	b29b      	uxth	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	461c      	mov	r4, r3
 8001190:	4615      	mov	r5, r2
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <main+0x264>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	eb14 0802 	adds.w	r8, r4, r2
 800119c:	eb45 0903 	adc.w	r9, r5, r3
 80011a0:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <main+0x264>)
 80011a2:	e9c3 8900 	strd	r8, r9, [r3]
	  counter++;
 80011a6:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <main+0x268>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a46      	ldr	r2, [pc, #280]	@ (80012c8 <main+0x268>)
 80011ae:	6013      	str	r3, [r2, #0]


	  if(counter == average_runs){
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <main+0x268>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b32      	cmp	r3, #50	@ 0x32
 80011b6:	d15d      	bne.n	8001274 <main+0x214>
		  float avg_current = current_sum/average_runs;
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <main+0x260>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4943      	ldr	r1, [pc, #268]	@ (80012cc <main+0x26c>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fdc6 	bl	8000d50 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]

		  avg_current = rounding(avg_current); //to closest x.x value
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff ff19 	bl	8001000 <rounding>
 80011ce:	60f8      	str	r0, [r7, #12]


		  if(avg_current < 0){
 80011d0:	f04f 0100 	mov.w	r1, #0
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fea5 	bl	8000f24 <__aeabi_fcmplt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <main+0x186>
			  avg_current = 0; // in no current state sometimes current reading -0.01 Ampere type stuff -> CAN cant handle since uint8_t is unisgned
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
		  }

		  //float avg_adc = ((float)adc_sum)/average_runs;

		  counter = 0;
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <main+0x268>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
		  current_sum = 0;
 80011ec:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <main+0x260>)
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
		  adc_sum = 0;
 80011f4:	4933      	ldr	r1, [pc, #204]	@ (80012c4 <main+0x264>)
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]

			TxHeader.DLC=2; //send 1 byte of data as current data
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <main+0x258>)
 8001204:	2202      	movs	r2, #2
 8001206:	611a      	str	r2, [r3, #16]

			//encode current into both bytes --> byte 1 for integer part, byte 2 for decimal part.
			TxData[0] = (uint8_t)(avg_current);  // integer part
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff fed9 	bl	8000fc0 <__aeabi_f2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <main+0x270>)
 8001214:	701a      	strb	r2, [r3, #0]
			TxData[1] = (uint8_t)((avg_current - (int)(avg_current)) * 100.0);  // two decimal digits
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff feac 	bl	8000f74 <__aeabi_f2iz>
 800121c:	4603      	mov	r3, r0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fc8e 	bl	8000b40 <__aeabi_i2f>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff fbd3 	bl	80009d4 <__aeabi_fsub>
 800122e:	4603      	mov	r3, r0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f8f1 	bl	8000418 <__aeabi_f2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <main+0x274>)
 800123c:	f7ff f944 	bl	80004c8 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fb50 	bl	80008ec <__aeabi_d2uiz>
 800124c:	4603      	mov	r3, r0
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <main+0x270>)
 8001252:	705a      	strb	r2, [r3, #1]

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <main+0x278>)
 800125a:	f002 fa89 	bl	8003770 <HAL_GPIO_TogglePin>
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <main+0x27c>)
 8001260:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <main+0x270>)
 8001262:	4915      	ldr	r1, [pc, #84]	@ (80012b8 <main+0x258>)
 8001264:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <main+0x240>)
 8001266:	f001 fba0 	bl	80029aa <HAL_CAN_AddTxMessage>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <main+0x214>
			{
				Error_Handler ();
 8001270:	f000 fc12 	bl	8001a98 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001274:	b662      	cpsie	i
}
 8001276:	bf00      	nop
  {
 8001278:	e730      	b.n	80010dc <main+0x7c>
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	4dd2f1aa 	.word	0x4dd2f1aa
 8001284:	40516862 	.word	0x40516862
 8001288:	b020c49c 	.word	0xb020c49c
 800128c:	40938572 	.word	0x40938572
 8001290:	2b020c4a 	.word	0x2b020c4a
 8001294:	40041687 	.word	0x40041687
 8001298:	9999999a 	.word	0x9999999a
 800129c:	3fb99999 	.word	0x3fb99999
 80012a0:	2000006c 	.word	0x2000006c
 80012a4:	20000094 	.word	0x20000094
 80012a8:	20000181 	.word	0x20000181
 80012ac:	40010800 	.word	0x40010800
 80012b0:	200000dc 	.word	0x200000dc
 80012b4:	2000003c 	.word	0x2000003c
 80012b8:	20000140 	.word	0x20000140
 80012bc:	20000198 	.word	0x20000198
 80012c0:	20000190 	.word	0x20000190
 80012c4:	20000188 	.word	0x20000188
 80012c8:	20000194 	.word	0x20000194
 80012cc:	42480000 	.word	0x42480000
 80012d0:	20000160 	.word	0x20000160
 80012d4:	40590000 	.word	0x40590000
 80012d8:	40011000 	.word	0x40011000
 80012dc:	20000168 	.word	0x20000168

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ea:	2228      	movs	r2, #40	@ 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 ff2c 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131e:	2301      	movs	r3, #1
 8001320:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001322:	2302      	movs	r3, #2
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800132a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800132c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fa34 	bl	80037a4 <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001342:	f000 fba9 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	230f      	movs	r3, #15
 8001348:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2102      	movs	r1, #2
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fca0 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800136e:	f000 fb93 	bl	8001a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001372:	2302      	movs	r3, #2
 8001374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fdee 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800138a:	f000 fb85 	bl	8001a98 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	@ 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_ADC1_Init+0x74>)
 80013aa:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <MX_ADC1_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_ADC1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_ADC1_Init+0x74>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_ADC1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_ADC1_Init+0x74>)
 80013c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_ADC1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_ADC1_Init+0x74>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_ADC1_Init+0x74>)
 80013d6:	f000 fdbf 	bl	8001f58 <HAL_ADC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 fb5a 	bl	8001a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0x74>)
 80013f6:	f000 ff3d 	bl	8002274 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001400:	f000 fb4a 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000003c 	.word	0x2000003c
 8001410:	40012400 	.word	0x40012400

08001414 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <MX_CAN_Init+0xa0>)
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <MX_CAN_Init+0xa4>)
 800141e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001422:	2204      	movs	r2, #4
 8001424:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_CAN_Init+0xa0>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001434:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8001438:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_CAN_Init+0xa0>)
 800143c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001440:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_CAN_Init+0xa0>)
 800144a:	2200      	movs	r2, #0
 800144c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_CAN_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001466:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_CAN_Init+0xa0>)
 8001468:	f001 f897 	bl	800259a <HAL_CAN_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001472:	f000 fb11 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // from 0 to 13, which filter bank to use from the assigned ones
 800147a:	230a      	movs	r3, #10
 800147c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1; //accept messages at FIFO1
 800147e:	2301      	movs	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = MASTER_ID<<5; //accept from only master ID
 8001482:	f646 43a0 	movw	r3, #27808	@ 0x6ca0
 8001486:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = MASTER_ID<<5;
 800148c:	f646 43a0 	movw	r3, #27808	@ 0x6ca0
 8001490:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter for single CAN MCUs
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MX_CAN_Init+0xa0>)
 80014a8:	f001 f972 	bl	8002790 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000006c 	.word	0x2000006c
 80014b8:	40006400 	.word	0x40006400

080014bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18-1;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 80014f6:	2211      	movs	r2, #17
 80014f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001502:	22fe      	movs	r2, #254	@ 0xfe
 8001504:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001514:	f002 fdda 	bl	80040cc <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800151e:	f000 fabb 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001530:	f003 f9f8 	bl	8004924 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800153a:	f000 faad 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153e:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001540:	f002 fe13 	bl	800416a <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800154a:	f000 faa5 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4619      	mov	r1, r3
 800155c:	4810      	ldr	r0, [pc, #64]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 800155e:	f003 fd85 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001568:	f000 fa96 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	@ 0x60
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	220c      	movs	r2, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001584:	f003 f90c 	bl	80047a0 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800158e:	f000 fa83 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM2_Init+0xe4>)
 8001594:	f000 fbbe 	bl	8001d14 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000094 	.word	0x20000094

080015a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2224      	movs	r2, #36	@ 0x24
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fdca 	bl	800514c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <MX_TIM4_Init+0xa4>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_TIM4_Init+0xa0>)
 80015e2:	2280      	movs	r2, #128	@ 0x80
 80015e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80015f6:	230f      	movs	r3, #15
 80015f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fe:	2301      	movs	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_TIM4_Init+0xa0>)
 8001612:	f002 fea5 	bl	8004360 <HAL_TIM_Encoder_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800161c:	f000 fa3c 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_TIM4_Init+0xa0>)
 800162e:	f003 fd1d 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001638:	f000 fa2e 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	@ 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000dc 	.word	0x200000dc
 8001648:	40000800 	.word	0x40000800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <MX_GPIO_Init+0xf8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a37      	ldr	r2, [pc, #220]	@ (8001744 <MX_GPIO_Init+0xf8>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <MX_GPIO_Init+0xf8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <MX_GPIO_Init+0xf8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <MX_GPIO_Init+0xf8>)
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <MX_GPIO_Init+0xf8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <MX_GPIO_Init+0xf8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a2b      	ldr	r2, [pc, #172]	@ (8001744 <MX_GPIO_Init+0xf8>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <MX_GPIO_Init+0xf8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <MX_GPIO_Init+0xf8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a25      	ldr	r2, [pc, #148]	@ (8001744 <MX_GPIO_Init+0xf8>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <MX_GPIO_Init+0xf8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c6:	4820      	ldr	r0, [pc, #128]	@ (8001748 <MX_GPIO_Init+0xfc>)
 80016c8:	f002 f83a 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2110      	movs	r1, #16
 80016d0:	481e      	ldr	r0, [pc, #120]	@ (800174c <MX_GPIO_Init+0x100>)
 80016d2:	f002 f835 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016dc:	481c      	ldr	r0, [pc, #112]	@ (8001750 <MX_GPIO_Init+0x104>)
 80016de:	f002 f82f 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	4813      	ldr	r0, [pc, #76]	@ (8001748 <MX_GPIO_Init+0xfc>)
 80016fc:	f001 fe9c 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001700:	2310      	movs	r3, #16
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_GPIO_Init+0x100>)
 8001718:	f001 fe8e 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : Brake_Pin */
  GPIO_InitStruct.Pin = Brake_Pin;
 800171c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Brake_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	4806      	ldr	r0, [pc, #24]	@ (8001750 <MX_GPIO_Init+0x104>)
 8001736:	f001 fe7f 	bl	8003438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173a:	bf00      	nop
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40011000 	.word	0x40011000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00

08001754 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	//receive message stored in the CAN FIFO1 buffer
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 800175c:	4b56      	ldr	r3, [pc, #344]	@ (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 800175e:	4a57      	ldr	r2, [pc, #348]	@ (80018bc <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001760:	2101      	movs	r1, #1
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 f9f0 	bl	8002b48 <HAL_CAN_GetRxMessage>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		Error_Handler();
 800176e:	f000 f993 	bl	8001a98 <Error_Handler>
	}

	//check if the message is coming from master node and whether it is meant for the current slave node
	//break down the command into qualifier and address
	uint8_t command=RxData[0]>>5; //look at the first 3 bits
 8001772:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	73fb      	strb	r3, [r7, #15]
	uint8_t address=(command<<5)^RxData[0];
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	b25a      	sxtb	r2, r3
 8001780:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4053      	eors	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	73bb      	strb	r3, [r7, #14]

	if (RxHeader.DLC==3 && address==SLAVE_ID-SLAVE0_ID) //polling mode will send 3 bytes of data now
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b03      	cmp	r3, #3
 8001792:	f040 8106 	bne.w	80019a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x24e>
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8102 	bne.w	80019a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x24e>
	{
		if (command==polling || command == PID_hold)
 800179e:	4b48      	ldr	r3, [pc, #288]	@ (80018c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d005      	beq.n	80017b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
 80017a8:	4b46      	ldr	r3, [pc, #280]	@ (80018c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	f040 80f7 	bne.w	80019a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x24e>
		{
			//set PWM and direction pins
			PWM=RxData[1];
 80017b4:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80017b6:	785a      	ldrb	r2, [r3, #1]
 80017b8:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 80017ba:	701a      	strb	r2, [r3, #0]
			DIR=RxData[2];
 80017bc:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80017be:	789a      	ldrb	r2, [r3, #2]
 80017c0:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80017c2:	701a      	strb	r2, [r3, #0]

			TIM2->CCR4=PWM; //set the duty cycle as an 8 bit value that is received
 80017c4:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40

			if (command == polling){
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d111      	bne.n	80017fc <HAL_CAN_RxFifo1MsgPendingCallback+0xa8>
			if (PWM > 0)
 80017d8:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_CAN_RxFifo1MsgPendingCallback+0x9a>
				HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_SET); //set the pin high to open the brake
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017e6:	483a      	ldr	r0, [pc, #232]	@ (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 80017e8:	f001 ffaa 	bl	8003740 <HAL_GPIO_WritePin>
 80017ec:	e00c      	b.n	8001808 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
			else
				HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_RESET); //activate the brake if no command is given
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f4:	4836      	ldr	r0, [pc, #216]	@ (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 80017f6:	f001 ffa3 	bl	8003740 <HAL_GPIO_WritePin>
 80017fa:	e005      	b.n	8001808 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
			}
			else
			{
				HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_RESET); // activate the brake if no motion command is given
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001802:	4833      	ldr	r0, [pc, #204]	@ (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 8001804:	f001 ff9c 	bl	8003740 <HAL_GPIO_WritePin>
			}
			//set the direction pin
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin,DIR); //set the initial value of DIR
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	2110      	movs	r1, #16
 8001810:	4830      	ldr	r0, [pc, #192]	@ (80018d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 8001812:	f001 ff95 	bl	8003740 <HAL_GPIO_WritePin>

			//extract information about encoder and send to master node
			TxHeader.DLC=6; //send 6 bytes of data for encoder input
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 8001818:	2206      	movs	r2, #6
 800181a:	611a      	str	r2, [r3, #16]

			currentEnc=TIM4->CNT; //get the current count of encoder and remove offset
 800181c:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	4a2f      	ldr	r2, [pc, #188]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001822:	6013      	str	r3, [r2, #0]
			if (currentEnc==previousEnc)
 8001824:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d103      	bne.n	8001838 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
				diff=0; //no change in velocity
 8001830:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	e06c      	b.n	8001912 <HAL_CAN_RxFifo1MsgPendingCallback+0x1be>
			else if (currentEnc>previousEnc)
 8001838:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d926      	bls.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x13e>
			{
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) //underflow occurred
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b10      	cmp	r3, #16
 8001850:	d113      	bne.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x126>
					diff=-previousEnc-__HAL_TIM_GET_AUTORELOAD(&htim4)+currentEnc;
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	425b      	negs	r3, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	b29b      	uxth	r3, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	e04b      	b.n	8001912 <HAL_CAN_RxFifo1MsgPendingCallback+0x1be>
				else
					diff=currentEnc-previousEnc;
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	e03f      	b.n	8001912 <HAL_CAN_RxFifo1MsgPendingCallback+0x1be>
			}
			else
			{
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b10      	cmp	r3, #16
 800189e:	d127      	bne.n	80018f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>
					diff=currentEnc-previousEnc;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	e02c      	b.n	8001912 <HAL_CAN_RxFifo1MsgPendingCallback+0x1be>
 80018b8:	20000158 	.word	0x20000158
 80018bc:	20000124 	.word	0x20000124
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000002 	.word	0x20000002
 80018c8:	20000180 	.word	0x20000180
 80018cc:	20000181 	.word	0x20000181
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40010800 	.word	0x40010800
 80018d8:	20000140 	.word	0x20000140
 80018dc:	40000800 	.word	0x40000800
 80018e0:	20000170 	.word	0x20000170
 80018e4:	20000174 	.word	0x20000174
 80018e8:	20000178 	.word	0x20000178
 80018ec:	200000dc 	.word	0x200000dc
				else //overflow occurred
					diff=currentEnc+__HAL_TIM_GET_AUTORELOAD(&htim4)-previousEnc;
 80018f0:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4413      	add	r3, r2
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29b      	uxth	r3, r3
 800190c:	b21a      	sxth	r2, r3
 800190e:	4b42      	ldr	r3, [pc, #264]	@ (8001a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 8001910:	801a      	strh	r2, [r3, #0]
			}
			pos+=diff;
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	461a      	mov	r2, r3
 800191a:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a3e      	ldr	r2, [pc, #248]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001922:	6013      	str	r3, [r2, #0]
			previousEnc=currentEnc;
 8001924:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3a      	ldr	r2, [pc, #232]	@ (8001a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800192a:	6013      	str	r3, [r2, #0]
			//first 4 bytes -> absolute position value
			//next 2 bytes -> angular position
			//next 2 bytes -> difference in encoder readings

			//extracting bytes for absolute encoder position
			uint8_t b0 = (pos>>24)&0xFF;
 800192c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e1b      	lsrs	r3, r3, #24
 8001932:	737b      	strb	r3, [r7, #13]
			uint8_t b1 = (pos>>16)&0xFF;
 8001934:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	141b      	asrs	r3, r3, #16
 800193a:	733b      	strb	r3, [r7, #12]
			uint8_t b2 = (pos>>8)&0xFF;
 800193c:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	121b      	asrs	r3, r3, #8
 8001942:	72fb      	strb	r3, [r7, #11]
			uint8_t b3 = (pos)&0xFF;
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	72bb      	strb	r3, [r7, #10]
			angPos=round((3600.0*currentEnc)/(double)MAX_COUNT);
			uint8_t b4 = (angPos>>8)&0xFF;
			uint8_t b5 = (angPos)&0xFF;*/

			//extracting bytes for difference in encoder values
			uint8_t b4 = (diff>>8)&0XFF;
 800194a:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	121b      	asrs	r3, r3, #8
 8001952:	b21b      	sxth	r3, r3
 8001954:	727b      	strb	r3, [r7, #9]
			uint8_t b5 = (diff)&0xFF;
 8001956:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	723b      	strb	r3, [r7, #8]

			//preparing data for transmission
			TxData[0]=b0;
 800195e:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	7013      	strb	r3, [r2, #0]
			TxData[1]=b1;
 8001964:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001966:	7b3b      	ldrb	r3, [r7, #12]
 8001968:	7053      	strb	r3, [r2, #1]
			TxData[2]=b2;
 800196a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	7093      	strb	r3, [r2, #2]
			TxData[3]=b3;
 8001970:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001972:	7abb      	ldrb	r3, [r7, #10]
 8001974:	70d3      	strb	r3, [r2, #3]
			TxData[4]=b4;
 8001976:	4a2a      	ldr	r2, [pc, #168]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001978:	7a7b      	ldrb	r3, [r7, #9]
 800197a:	7113      	strb	r3, [r2, #4]
			TxData[5]=b5;
 800197c:	4a28      	ldr	r2, [pc, #160]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800197e:	7a3b      	ldrb	r3, [r7, #8]
 8001980:	7153      	strb	r3, [r2, #5]

			//send the CAN message
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8001984:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001986:	4928      	ldr	r1, [pc, #160]	@ (8001a28 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8001988:	4828      	ldr	r0, [pc, #160]	@ (8001a2c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800198a:	f001 f80e 	bl	80029aa <HAL_CAN_AddTxMessage>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_CAN_RxFifo1MsgPendingCallback+0x244>
			{
				Error_Handler ();
 8001994:	f000 f880 	bl	8001a98 <Error_Handler>
			}

			//toggle GPIO pin to indicate continuous message transmission
			//use this option for debugging
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199c:	4824      	ldr	r0, [pc, #144]	@ (8001a30 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800199e:	f001 fee7 	bl	8003770 <HAL_GPIO_TogglePin>
		}
	}

	if (RxHeader.DLC==1 && address==SLAVE_ID-SLAVE0_ID)
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d12b      	bne.n	8001a02 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d128      	bne.n	8001a02 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
	{
		HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_RESET); //activate the brake if no command is given
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019b6:	4820      	ldr	r0, [pc, #128]	@ (8001a38 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 80019b8:	f001 fec2 	bl	8003740 <HAL_GPIO_WritePin>

		//perform the systems check of CAN nodes
		if (command==sysCheck)
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d116      	bne.n	80019f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a0>
		{
			//HAL_GPIO_WritePin(Brake_GPIO_Port, Brake_Pin, GPIO_PIN_SET); //close the brake when not moving

			TxHeader.DLC=1; //send 1 byte of data as a systems check
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	611a      	str	r2, [r3, #16]
			TxData[0]=RxData[0];
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 80019d2:	701a      	strb	r2, [r3, #0]
			//transmit the received message back to master CAN node
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019d8:	4815      	ldr	r0, [pc, #84]	@ (8001a30 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 80019da:	f001 fec9 	bl	8003770 <HAL_GPIO_TogglePin>
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80019e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 80019e2:	4911      	ldr	r1, [pc, #68]	@ (8001a28 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 80019e4:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 80019e6:	f000 ffe0 	bl	80029aa <HAL_CAN_AddTxMessage>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a0>
			{
				Error_Handler ();
 80019f0:	f000 f852 	bl	8001a98 <Error_Handler>
			}
		}

		if (command==reset)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d101      	bne.n	8001a02 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
		{
			resetEncoder(); //reset the encoders when button is pressed
 80019fe:	f000 f823 	bl	8001a48 <resetEncoder>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin,GPIO_PIN_RESET); //set the initial value of DIR
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

		}*/
	}
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000dc 	.word	0x200000dc
 8001a10:	20000170 	.word	0x20000170
 8001a14:	20000174 	.word	0x20000174
 8001a18:	20000178 	.word	0x20000178
 8001a1c:	2000017c 	.word	0x2000017c
 8001a20:	20000160 	.word	0x20000160
 8001a24:	20000168 	.word	0x20000168
 8001a28:	20000140 	.word	0x20000140
 8001a2c:	2000006c 	.word	0x2000006c
 8001a30:	40011000 	.word	0x40011000
 8001a34:	20000124 	.word	0x20000124
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	2000016c 	.word	0x2000016c
 8001a40:	20000158 	.word	0x20000158
 8001a44:	20000001 	.word	0x20000001

08001a48 <resetEncoder>:

void resetEncoder()
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	//reset all the values for encoder data sharing
	// EXECUTE THE COMMAND ONLY AFTER MOVING TO HOME POSITION
	currentEnc=resetPos[SLAVE_ID - SLAVE0_ID];
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <resetEncoder+0x38>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <resetEncoder+0x3c>)
 8001a54:	601a      	str	r2, [r3, #0]
	previousEnc=resetPos[SLAVE_ID - SLAVE0_ID];
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <resetEncoder+0x38>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <resetEncoder+0x40>)
 8001a5e:	601a      	str	r2, [r3, #0]
	diff=0;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <resetEncoder+0x44>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]
	pos=resetPos[SLAVE_ID - SLAVE0_ID];
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <resetEncoder+0x38>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <resetEncoder+0x48>)
 8001a6e:	601a      	str	r2, [r3, #0]
	//angPos=0;
	TIM4->CNT=0; //reset the counter
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <resetEncoder+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000004 	.word	0x20000004
 8001a84:	20000170 	.word	0x20000170
 8001a88:	20000174 	.word	0x20000174
 8001a8c:	20000178 	.word	0x20000178
 8001a90:	2000017c 	.word	0x2000017c
 8001a94:	40000800 	.word	0x40000800

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_MspInit+0x5c>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_MspInit+0x60>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_MspInit+0x60>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000

08001b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <HAL_ADC_MspInit+0x6c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d121      	bne.n	8001b6c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_ADC_MspInit+0x70>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b68:	f001 fc66 	bl	8003438 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40012400 	.word	0x40012400
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010800 	.word	0x40010800

08001b80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_CAN_MspInit+0xc0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d14b      	bne.n	8001c38 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ba0:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	4a27      	ldr	r2, [pc, #156]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	61d3      	str	r3, [r2, #28]
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_CAN_MspInit+0xc4>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4818      	ldr	r0, [pc, #96]	@ (8001c48 <HAL_CAN_MspInit+0xc8>)
 8001be6:	f001 fc27 	bl	8003438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4812      	ldr	r0, [pc, #72]	@ (8001c48 <HAL_CAN_MspInit+0xc8>)
 8001c00:	f001 fc1a 	bl	8003438 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_CAN_MspInit+0xcc>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_CAN_MspInit+0xcc>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2015      	movs	r0, #21
 8001c2e:	f001 fbcc 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c32:	2015      	movs	r0, #21
 8001c34:	f001 fbe5 	bl	8003402 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40006400 	.word	0x40006400
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40010000 	.word	0x40010000

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c60:	d10b      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_TIM_Base_MspInit+0x34>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_TIM_Base_MspInit+0x34>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_TIM_Base_MspInit+0x34>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d12b      	bne.n	8001d00 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca8:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd8:	23c0      	movs	r3, #192	@ 0xc0
 8001cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cec:	f001 fba4 	bl	8003438 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	201e      	movs	r0, #30
 8001cf6:	f001 fb68 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfa:	201e      	movs	r0, #30
 8001cfc:	f001 fb81 	bl	8003402 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010c00 	.word	0x40010c00

08001d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d32:	d117      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <HAL_TIM_MspPostInit+0x58>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <HAL_TIM_MspPostInit+0x58>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_TIM_MspPostInit+0x58>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <HAL_TIM_MspPostInit+0x5c>)
 8001d60:	f001 fb6a 	bl	8003438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <NMI_Handler+0x4>

08001d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f888 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <CAN1_RX1_IRQHandler+0x10>)
 8001dd2:	f000 ffff 	bl	8002dd4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000006c 	.word	0x2000006c

08001de0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <TIM4_IRQHandler+0x10>)
 8001de6:	f002 fbeb 	bl	80045c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200000dc 	.word	0x200000dc

08001df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff fff8 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	@ (8001e34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e06:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e08:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e1c:	4c09      	ldr	r4, [pc, #36]	@ (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 f997 	bl	800515c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2e:	f7ff f917 	bl	8001060 <main>
  bx lr
 8001e32:	4770      	bx	lr
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e3c:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8001e40:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001e44:	200001a0 	.word	0x200001a0

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f001 faa9 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	200f      	movs	r0, #15
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fe1c 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 fac1 	bl	800341e <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f001 fa89 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	20000018 	.word	0x20000018
 8001ed4:	20000014 	.word	0x20000014

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a03      	ldr	r2, [pc, #12]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000018 	.word	0x20000018
 8001ef8:	2000019c 	.word	0x2000019c

08001efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	@ (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	2000019c 	.word	0x2000019c

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000018 	.word	0x20000018

08001f58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0be      	b.n	80020f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fdb6 	bl	8001b08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fabb 	bl	8002518 <ADC_ConversionStop_Disable>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8099 	bne.w	80020e6 <HAL_ADC_Init+0x18e>
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8095 	bne.w	80020e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fc4:	f023 0302 	bic.w	r3, r3, #2
 8001fc8:	f043 0202 	orr.w	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fe0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_Init+0xa2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_ADC_Init+0xa8>
 8001ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffe:	e000      	b.n	8002002 <HAL_ADC_Init+0xaa>
 8002000:	2300      	movs	r3, #0
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7d1b      	ldrb	r3, [r3, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d119      	bne.n	8002044 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	3b01      	subs	r3, #1
 800201e:	035a      	lsls	r2, r3, #13
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00b      	b.n	8002044 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_ADC_Init+0x1a8>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	430b      	orrs	r3, r1
 800206a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002074:	d003      	beq.n	800207e <HAL_ADC_Init+0x126>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d104      	bne.n	8002088 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <HAL_ADC_Init+0x1ac>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c2:	e018      	b.n	80020f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f023 0312 	bic.w	r3, r3, #18
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	ffe1f7fd 	.word	0xffe1f7fd
 8002104:	ff1f0efe 	.word	0xff1f0efe

08002108 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Start_IT+0x1a>
 800211e:	2302      	movs	r3, #2
 8002120:	e0a0      	b.n	8002264 <HAL_ADC_Start_IT+0x15c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f99a 	bl	8002464 <ADC_Enable>
 8002130:	4603      	mov	r3, r0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 808f 	bne.w	800225a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_ADC_Start_IT+0x164>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d105      	bne.n	8002166 <HAL_ADC_Start_IT+0x5e>
 800215a:	4b45      	ldr	r3, [pc, #276]	@ (8002270 <HAL_ADC_Start_IT+0x168>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002188:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002190:	e01d      	b.n	80021ce <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a33      	ldr	r2, [pc, #204]	@ (8002270 <HAL_ADC_Start_IT+0x168>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Start_IT+0xaa>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <HAL_ADC_Start_IT+0x164>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10d      	bne.n	80021ce <HAL_ADC_Start_IT+0xc6>
 80021b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_ADC_Start_IT+0x168>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	f023 0206 	bic.w	r2, r3, #6
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021e6:	e002      	b.n	80021ee <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f06f 0202 	mvn.w	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800221a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800221e:	d113      	bne.n	8002248 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002224:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_ADC_Start_IT+0x164>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d105      	bne.n	8002236 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_ADC_Start_IT+0x168>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	e00c      	b.n	8002262 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e003      	b.n	8002262 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40012800 	.word	0x40012800
 8002270:	40012400 	.word	0x40012400

08002274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x20>
 8002290:	2302      	movs	r3, #2
 8002292:	e0dc      	b.n	800244e <HAL_ADC_ConfigChannel+0x1da>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d81c      	bhi.n	80022de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b05      	subs	r3, #5
 80022b6:	221f      	movs	r2, #31
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b05      	subs	r3, #5
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	@ 0x34
 80022dc:	e03c      	b.n	8002358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d81c      	bhi.n	8002320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	@ 0x23
 80022f8:	221f      	movs	r2, #31
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	4019      	ands	r1, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b23      	subs	r3, #35	@ 0x23
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	631a      	str	r2, [r3, #48]	@ 0x30
 800231e:	e01b      	b.n	8002358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b41      	subs	r3, #65	@ 0x41
 8002332:	221f      	movs	r2, #31
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	4019      	ands	r1, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	@ 0x41
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d91c      	bls.n	800239a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	2207      	movs	r2, #7
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	4019      	ands	r1, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6898      	ldr	r0, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	3b1e      	subs	r3, #30
 800238c:	fa00 f203 	lsl.w	r2, r0, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	e019      	b.n	80023ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6919      	ldr	r1, [r3, #16]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4019      	ands	r1, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6898      	ldr	r0, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d003      	beq.n	80023de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023da:	2b11      	cmp	r3, #17
 80023dc:	d132      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <HAL_ADC_ConfigChannel+0x1e4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d125      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d126      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002404:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d11a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_ADC_ConfigChannel+0x1e8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a13      	ldr	r2, [pc, #76]	@ (8002460 <HAL_ADC_ConfigChannel+0x1ec>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9a      	lsrs	r2, r3, #18
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002424:	e002      	b.n	800242c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x1b2>
 8002432:	e007      	b.n	8002444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012400 	.word	0x40012400
 800245c:	20000010 	.word	0x20000010
 8002460:	431bde83 	.word	0x431bde83

08002464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d040      	beq.n	8002504 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002492:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <ADC_Enable+0xac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1f      	ldr	r2, [pc, #124]	@ (8002514 <ADC_Enable+0xb0>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	0c9b      	lsrs	r3, r3, #18
 800249e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a0:	e002      	b.n	80024a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ae:	f7ff fd25 	bl	8001efc <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024b4:	e01f      	b.n	80024f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024b6:	f7ff fd21 	bl	8001efc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d918      	bls.n	80024f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d011      	beq.n	80024f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d1d8      	bne.n	80024b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000010 	.word	0x20000010
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12e      	bne.n	8002590 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002542:	f7ff fcdb 	bl	8001efc <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002548:	e01b      	b.n	8002582 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800254a:	f7ff fcd7 	bl	8001efc <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d914      	bls.n	8002582 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10d      	bne.n	8002582 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d0dc      	beq.n	800254a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0ed      	b.n	8002788 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fae1 	bl	8001b80 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ce:	f7ff fc95 	bl	8001efc <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025d4:	e012      	b.n	80025fc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025d6:	f7ff fc91 	bl	8001efc <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b0a      	cmp	r3, #10
 80025e2:	d90b      	bls.n	80025fc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0c5      	b.n	8002788 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0e5      	beq.n	80025d6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0202 	bic.w	r2, r2, #2
 8002618:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261a:	f7ff fc6f 	bl	8001efc <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002620:	e012      	b.n	8002648 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002622:	f7ff fc6b 	bl	8001efc <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b0a      	cmp	r3, #10
 800262e:	d90b      	bls.n	8002648 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2205      	movs	r2, #5
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e09f      	b.n	8002788 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e5      	bne.n	8002622 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7e1b      	ldrb	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e007      	b.n	8002680 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e5b      	ldrb	r3, [r3, #25]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d108      	bne.n	800269a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e9b      	ldrb	r3, [r3, #26]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0220 	orr.w	r2, r2, #32
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0220 	bic.w	r2, r2, #32
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7edb      	ldrb	r3, [r3, #27]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d108      	bne.n	80026ee <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0210 	orr.w	r2, r2, #16
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7f1b      	ldrb	r3, [r3, #28]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0208 	orr.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e007      	b.n	8002728 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0208 	bic.w	r2, r2, #8
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f5b      	ldrb	r3, [r3, #29]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0204 	orr.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e007      	b.n	8002752 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	ea42 0103 	orr.w	r1, r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d003      	beq.n	80027b6 <HAL_CAN_ConfigFilter+0x26>
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	f040 80aa 	bne.w	800290a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d123      	bne.n	8002838 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002812:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3248      	adds	r2, #72	@ 0x48
 8002818:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	3348      	adds	r3, #72	@ 0x48
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d122      	bne.n	8002886 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002860:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3248      	adds	r2, #72	@ 0x48
 8002866:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800287a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800287c:	6979      	ldr	r1, [r7, #20]
 800287e:	3348      	adds	r3, #72	@ 0x48
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028a0:	e007      	b.n	80028b2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	401a      	ands	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80028cc:	e007      	b.n	80028de <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028fc:	f023 0201 	bic.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e006      	b.n	8002918 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12e      	bne.n	8002994 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800294e:	f7ff fad5 	bl	8001efc <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002954:	e012      	b.n	800297c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002956:	f7ff fad1 	bl	8001efc <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b0a      	cmp	r3, #10
 8002962:	d90b      	bls.n	800297c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2205      	movs	r2, #5
 8002974:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e012      	b.n	80029a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e006      	b.n	80029a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b089      	sub	sp, #36	@ 0x24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_AddTxMessage+0x2c>
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f040 80ad 	bne.w	8002b30 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8095 	beq.w	8002b20 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a00:	2201      	movs	r2, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	409a      	lsls	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3318      	adds	r3, #24
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e00f      	b.n	8002a4e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3318      	adds	r3, #24
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3304      	adds	r3, #4
 8002a60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	7d1b      	ldrb	r3, [r3, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d111      	bne.n	8002a8e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3318      	adds	r3, #24
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6811      	ldr	r1, [r2, #0]
 8002a7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3318      	adds	r3, #24
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	440b      	add	r3, r1
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3307      	adds	r3, #7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	061a      	lsls	r2, r3, #24
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3305      	adds	r3, #5
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	3204      	adds	r2, #4
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6811      	ldr	r1, [r2, #0]
 8002ab6:	ea43 0200 	orr.w	r2, r3, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ac4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3303      	adds	r3, #3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	061a      	lsls	r2, r3, #24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6811      	ldr	r1, [r2, #0]
 8002aec:	ea43 0200 	orr.w	r2, r3, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002afa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3318      	adds	r3, #24
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3318      	adds	r3, #24
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e00e      	b.n	8002b3e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e006      	b.n	8002b3e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d003      	beq.n	8002b6c <HAL_CAN_GetRxMessage+0x24>
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	f040 8103 	bne.w	8002d72 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0f7      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0e8      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	331b      	adds	r3, #27
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0204 	and.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	331b      	adds	r3, #27
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0d5b      	lsrs	r3, r3, #21
 8002bdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e00b      	b.n	8002bfe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	331b      	adds	r3, #27
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0202 	and.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2208      	movs	r2, #8
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	e00b      	b.n	8002c4c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	331b      	adds	r3, #27
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	331b      	adds	r3, #27
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	331b      	adds	r3, #27
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0a1a      	lsrs	r2, r3, #8
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0c1a      	lsrs	r2, r3, #16
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e1a      	lsrs	r2, r3, #24
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3303      	adds	r3, #3
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0a1a      	lsrs	r2, r3, #8
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3305      	adds	r3, #5
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0c1a      	lsrs	r2, r3, #16
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3306      	adds	r3, #6
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e1a      	lsrs	r2, r3, #24
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3307      	adds	r3, #7
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0220 	orr.w	r2, r2, #32
 8002d6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e006      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d002      	beq.n	8002da8 <HAL_CAN_ActivateNotification+0x1e>
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d109      	bne.n	8002dbc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6959      	ldr	r1, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e006      	b.n	8002dca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07c      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f983 	bl	8003142 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e3c:	e016      	b.n	8002e6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e00c      	b.n	8002e6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e64:	e002      	b.n	8002e6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f986 	bl	8003178 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f962 	bl	8003154 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e90:	e016      	b.n	8002ec0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	e00c      	b.n	8002ec0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb8:	e002      	b.n	8002ec0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f965 	bl	800318a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d024      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ed2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f941 	bl	8003166 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ee4:	e016      	b.n	8002f14 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e00c      	b.n	8002f14 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0c:	e002      	b.n	8002f14 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f944 	bl	800319c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2210      	movs	r2, #16
 8002f36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f933 	bl	80031c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f91b 	bl	80031ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f90a 	bl	80031d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fbbc 	bl	8001754 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8f3 	bl	80031e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8eb 	bl	80031f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d07b      	beq.n	8003122 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d072      	beq.n	800311a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800308e:	2b00      	cmp	r3, #0
 8003090:	d043      	beq.n	800311a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03e      	beq.n	800311a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a2:	2b60      	cmp	r3, #96	@ 0x60
 80030a4:	d02b      	beq.n	80030fe <HAL_CAN_IRQHandler+0x32a>
 80030a6:	2b60      	cmp	r3, #96	@ 0x60
 80030a8:	d82e      	bhi.n	8003108 <HAL_CAN_IRQHandler+0x334>
 80030aa:	2b50      	cmp	r3, #80	@ 0x50
 80030ac:	d022      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x320>
 80030ae:	2b50      	cmp	r3, #80	@ 0x50
 80030b0:	d82a      	bhi.n	8003108 <HAL_CAN_IRQHandler+0x334>
 80030b2:	2b40      	cmp	r3, #64	@ 0x40
 80030b4:	d019      	beq.n	80030ea <HAL_CAN_IRQHandler+0x316>
 80030b6:	2b40      	cmp	r3, #64	@ 0x40
 80030b8:	d826      	bhi.n	8003108 <HAL_CAN_IRQHandler+0x334>
 80030ba:	2b30      	cmp	r3, #48	@ 0x30
 80030bc:	d010      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x30c>
 80030be:	2b30      	cmp	r3, #48	@ 0x30
 80030c0:	d822      	bhi.n	8003108 <HAL_CAN_IRQHandler+0x334>
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d002      	beq.n	80030cc <HAL_CAN_IRQHandler+0x2f8>
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d005      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030ca:	e01d      	b.n	8003108 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030d4:	e019      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	f043 0310 	orr.w	r3, r3, #16
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030de:	e014      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030e8:	e00f      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030f2:	e00a      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030fc:	e005      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003106:	e000      	b.n	800310a <HAL_CAN_IRQHandler+0x336>
            break;
 8003108:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003118:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2204      	movs	r2, #4
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f867 	bl	8003208 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800313a:	bf00      	nop
 800313c:	3728      	adds	r7, #40	@ 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
	...

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4906      	ldr	r1, [pc, #24]	@ (80032b4 <__NVIC_EnableIRQ+0x34>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	@ (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	@ (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f7ff ff90 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff2d 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff42 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff90 	bl	800330c <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5f 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff35 	bl	8003280 <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa2 	bl	8003370 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003438:	b480      	push	{r7}
 800343a:	b08b      	sub	sp, #44	@ 0x2c
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344a:	e169      	b.n	8003720 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800344c:	2201      	movs	r2, #1
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 8158 	bne.w	800371a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a9a      	ldr	r2, [pc, #616]	@ (80036d8 <HAL_GPIO_Init+0x2a0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d05e      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
 8003474:	4a98      	ldr	r2, [pc, #608]	@ (80036d8 <HAL_GPIO_Init+0x2a0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d875      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 800347a:	4a98      	ldr	r2, [pc, #608]	@ (80036dc <HAL_GPIO_Init+0x2a4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d058      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
 8003480:	4a96      	ldr	r2, [pc, #600]	@ (80036dc <HAL_GPIO_Init+0x2a4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d86f      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 8003486:	4a96      	ldr	r2, [pc, #600]	@ (80036e0 <HAL_GPIO_Init+0x2a8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d052      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
 800348c:	4a94      	ldr	r2, [pc, #592]	@ (80036e0 <HAL_GPIO_Init+0x2a8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d869      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 8003492:	4a94      	ldr	r2, [pc, #592]	@ (80036e4 <HAL_GPIO_Init+0x2ac>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d04c      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
 8003498:	4a92      	ldr	r2, [pc, #584]	@ (80036e4 <HAL_GPIO_Init+0x2ac>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d863      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 800349e:	4a92      	ldr	r2, [pc, #584]	@ (80036e8 <HAL_GPIO_Init+0x2b0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d046      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
 80034a4:	4a90      	ldr	r2, [pc, #576]	@ (80036e8 <HAL_GPIO_Init+0x2b0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d85d      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 80034aa:	2b12      	cmp	r3, #18
 80034ac:	d82a      	bhi.n	8003504 <HAL_GPIO_Init+0xcc>
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d859      	bhi.n	8003566 <HAL_GPIO_Init+0x12e>
 80034b2:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <HAL_GPIO_Init+0x80>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	08003533 	.word	0x08003533
 80034bc:	0800350d 	.word	0x0800350d
 80034c0:	0800351f 	.word	0x0800351f
 80034c4:	08003561 	.word	0x08003561
 80034c8:	08003567 	.word	0x08003567
 80034cc:	08003567 	.word	0x08003567
 80034d0:	08003567 	.word	0x08003567
 80034d4:	08003567 	.word	0x08003567
 80034d8:	08003567 	.word	0x08003567
 80034dc:	08003567 	.word	0x08003567
 80034e0:	08003567 	.word	0x08003567
 80034e4:	08003567 	.word	0x08003567
 80034e8:	08003567 	.word	0x08003567
 80034ec:	08003567 	.word	0x08003567
 80034f0:	08003567 	.word	0x08003567
 80034f4:	08003567 	.word	0x08003567
 80034f8:	08003567 	.word	0x08003567
 80034fc:	08003515 	.word	0x08003515
 8003500:	08003529 	.word	0x08003529
 8003504:	4a79      	ldr	r2, [pc, #484]	@ (80036ec <HAL_GPIO_Init+0x2b4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800350a:	e02c      	b.n	8003566 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	623b      	str	r3, [r7, #32]
          break;
 8003512:	e029      	b.n	8003568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	3304      	adds	r3, #4
 800351a:	623b      	str	r3, [r7, #32]
          break;
 800351c:	e024      	b.n	8003568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	3308      	adds	r3, #8
 8003524:	623b      	str	r3, [r7, #32]
          break;
 8003526:	e01f      	b.n	8003568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	330c      	adds	r3, #12
 800352e:	623b      	str	r3, [r7, #32]
          break;
 8003530:	e01a      	b.n	8003568 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800353a:	2304      	movs	r3, #4
 800353c:	623b      	str	r3, [r7, #32]
          break;
 800353e:	e013      	b.n	8003568 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003548:	2308      	movs	r3, #8
 800354a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	611a      	str	r2, [r3, #16]
          break;
 8003552:	e009      	b.n	8003568 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003554:	2308      	movs	r3, #8
 8003556:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	615a      	str	r2, [r3, #20]
          break;
 800355e:	e003      	b.n	8003568 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003560:	2300      	movs	r3, #0
 8003562:	623b      	str	r3, [r7, #32]
          break;
 8003564:	e000      	b.n	8003568 <HAL_GPIO_Init+0x130>
          break;
 8003566:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d801      	bhi.n	8003572 <HAL_GPIO_Init+0x13a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e001      	b.n	8003576 <HAL_GPIO_Init+0x13e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2bff      	cmp	r3, #255	@ 0xff
 800357c:	d802      	bhi.n	8003584 <HAL_GPIO_Init+0x14c>
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	e002      	b.n	800358a <HAL_GPIO_Init+0x152>
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	3b08      	subs	r3, #8
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	210f      	movs	r1, #15
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	431a      	orrs	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80b1 	beq.w	800371a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035b8:	4b4d      	ldr	r3, [pc, #308]	@ (80036f0 <HAL_GPIO_Init+0x2b8>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4a4c      	ldr	r2, [pc, #304]	@ (80036f0 <HAL_GPIO_Init+0x2b8>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6193      	str	r3, [r2, #24]
 80035c4:	4b4a      	ldr	r3, [pc, #296]	@ (80036f0 <HAL_GPIO_Init+0x2b8>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d0:	4a48      	ldr	r2, [pc, #288]	@ (80036f4 <HAL_GPIO_Init+0x2bc>)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <HAL_GPIO_Init+0x2c0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_GPIO_Init+0x1ec>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_GPIO_Init+0x2c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00d      	beq.n	8003620 <HAL_GPIO_Init+0x1e8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3e      	ldr	r2, [pc, #248]	@ (8003700 <HAL_GPIO_Init+0x2c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0x1e4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3d      	ldr	r2, [pc, #244]	@ (8003704 <HAL_GPIO_Init+0x2cc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_GPIO_Init+0x1e0>
 8003614:	2303      	movs	r3, #3
 8003616:	e006      	b.n	8003626 <HAL_GPIO_Init+0x1ee>
 8003618:	2304      	movs	r3, #4
 800361a:	e004      	b.n	8003626 <HAL_GPIO_Init+0x1ee>
 800361c:	2302      	movs	r3, #2
 800361e:	e002      	b.n	8003626 <HAL_GPIO_Init+0x1ee>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_GPIO_Init+0x1ee>
 8003624:	2300      	movs	r3, #0
 8003626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003628:	f002 0203 	and.w	r2, r2, #3
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4093      	lsls	r3, r2
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003636:	492f      	ldr	r1, [pc, #188]	@ (80036f4 <HAL_GPIO_Init+0x2bc>)
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003650:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	492c      	ldr	r1, [pc, #176]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]
 800365c:	e006      	b.n	800366c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800365e:	4b2a      	ldr	r3, [pc, #168]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	43db      	mvns	r3, r3
 8003666:	4928      	ldr	r1, [pc, #160]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003668:	4013      	ands	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003678:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4922      	ldr	r1, [pc, #136]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	43db      	mvns	r3, r3
 800368e:	491e      	ldr	r1, [pc, #120]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 8003690:	4013      	ands	r3, r2
 8003692:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4918      	ldr	r1, [pc, #96]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e006      	b.n	80036bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036ae:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	4914      	ldr	r1, [pc, #80]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d021      	beq.n	800370c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	490e      	ldr	r1, [pc, #56]	@ (8003708 <HAL_GPIO_Init+0x2d0>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
 80036d4:	e021      	b.n	800371a <HAL_GPIO_Init+0x2e2>
 80036d6:	bf00      	nop
 80036d8:	10320000 	.word	0x10320000
 80036dc:	10310000 	.word	0x10310000
 80036e0:	10220000 	.word	0x10220000
 80036e4:	10210000 	.word	0x10210000
 80036e8:	10120000 	.word	0x10120000
 80036ec:	10110000 	.word	0x10110000
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40010800 	.word	0x40010800
 80036fc:	40010c00 	.word	0x40010c00
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_GPIO_Init+0x304>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	43db      	mvns	r3, r3
 8003714:	4909      	ldr	r1, [pc, #36]	@ (800373c <HAL_GPIO_Init+0x304>)
 8003716:	4013      	ands	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	3301      	adds	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f ae8e 	bne.w	800344c <HAL_GPIO_Init+0x14>
  }
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	372c      	adds	r7, #44	@ 0x2c
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40010400 	.word	0x40010400

08003740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003750:	787b      	ldrb	r3, [r7, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800375c:	e003      	b.n	8003766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	041a      	lsls	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43d9      	mvns	r1, r3
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	400b      	ands	r3, r1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	611a      	str	r2, [r3, #16]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e272      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8087 	beq.w	80038d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b92      	ldr	r3, [pc, #584]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d112      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
 80037dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e8:	d10b      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	4b89      	ldr	r3, [pc, #548]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d06c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x12c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d168      	bne.n	80038d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e24c      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x76>
 800380c:	4b80      	ldr	r3, [pc, #512]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7f      	ldr	r2, [pc, #508]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e02e      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x98>
 8003822:	4b7b      	ldr	r3, [pc, #492]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7a      	ldr	r2, [pc, #488]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b78      	ldr	r3, [pc, #480]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a77      	ldr	r2, [pc, #476]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xbc>
 8003846:	4b72      	ldr	r3, [pc, #456]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a71      	ldr	r2, [pc, #452]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6f      	ldr	r3, [pc, #444]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 8003860:	4b6b      	ldr	r3, [pc, #428]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b68      	ldr	r3, [pc, #416]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a67      	ldr	r2, [pc, #412]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fb3c 	bl	8001efc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fb38 	bl	8001efc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e200      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xe4>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fb28 	bl	8001efc <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fb24 	bl	8001efc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1ec      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x10c>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
 80038f6:	4b46      	ldr	r3, [pc, #280]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b43      	ldr	r3, [pc, #268]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c0      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4939      	ldr	r1, [pc, #228]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <HAL_RCC_OscConfig+0x270>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe fadd 	bl	8001efc <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fad9 	bl	8001efc <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a1      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4927      	ldr	r1, [pc, #156]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b26      	ldr	r3, [pc, #152]	@ (8003a14 <HAL_RCC_OscConfig+0x270>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe fabc 	bl	8001efc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fe fab8 	bl	8001efc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e180      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03a      	beq.n	8003a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b17      	ldr	r3, [pc, #92]	@ (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fa9c 	bl	8001efc <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fa98 	bl	8001efc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e160      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 fa9c 	bl	8003f24 <RCC_Delay>
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f4:	f7fe fa82 	bl	8001efc <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fa:	e00f      	b.n	8003a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe fa7e 	bl	8001efc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d908      	bls.n	8003a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e146      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	42420000 	.word	0x42420000
 8003a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	4b92      	ldr	r3, [pc, #584]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e9      	bne.n	80039fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b88      	ldr	r3, [pc, #544]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4a87      	ldr	r2, [pc, #540]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	61d3      	str	r3, [r2, #28]
 8003a52:	4b85      	ldr	r3, [pc, #532]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7e      	ldr	r2, [pc, #504]	@ (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fa3f 	bl	8001efc <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fa3b 	bl	8001efc <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	@ 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e103      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b75      	ldr	r3, [pc, #468]	@ (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x312>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6213      	str	r3, [r2, #32]
 8003ab4:	e02d      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x334>
 8003abe:	4b6a      	ldr	r3, [pc, #424]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a69      	ldr	r2, [pc, #420]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	4b67      	ldr	r3, [pc, #412]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a66      	ldr	r2, [pc, #408]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d10c      	bne.n	8003afa <HAL_RCC_OscConfig+0x356>
 8003ae0:	4b61      	ldr	r3, [pc, #388]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a60      	ldr	r2, [pc, #384]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	4b5e      	ldr	r3, [pc, #376]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a5a      	ldr	r2, [pc, #360]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6213      	str	r3, [r2, #32]
 8003b06:	4b58      	ldr	r3, [pc, #352]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a57      	ldr	r2, [pc, #348]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe f9ef 	bl	8001efc <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe f9eb 	bl	8001efc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0b1      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	4b4b      	ldr	r3, [pc, #300]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ee      	beq.n	8003b22 <HAL_RCC_OscConfig+0x37e>
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fe f9d9 	bl	8001efc <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f9d5 	bl	8001efc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e09b      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	4b40      	ldr	r3, [pc, #256]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b3c      	ldr	r3, [pc, #240]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8087 	beq.w	8003c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8c:	4b36      	ldr	r3, [pc, #216]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d061      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d146      	bne.n	8003c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	4b33      	ldr	r3, [pc, #204]	@ (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe f9a9 	bl	8001efc <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe f9a5 	bl	8001efc <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e06d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc0:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd4:	d108      	bne.n	8003be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4921      	ldr	r1, [pc, #132]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a19      	ldr	r1, [r3, #32]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	491b      	ldr	r1, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe f979 	bl	8001efc <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe f975 	bl	8001efc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e03d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x46a>
 8003c2c:	e035      	b.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe f962 	bl	8001efc <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe f95e 	bl	8001efc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e026      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4e:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x498>
 8003c5a:	e01e      	b.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e019      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_OscConfig+0x500>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b67      	ldr	r3, [pc, #412]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	4965      	ldr	r1, [pc, #404]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a58      	ldr	r2, [pc, #352]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b39      	ldr	r3, [pc, #228]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4936      	ldr	r1, [pc, #216]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe f8b0 	bl	8001efc <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fe f8ac 	bl	8001efc <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e053      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d210      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4922      	ldr	r1, [pc, #136]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <HAL_RCC_ClockConfig+0x1cc>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_ClockConfig+0x1d0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f80e 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	080051bc 	.word	0x080051bc
 8003e74:	20000010 	.word	0x20000010
 8003e78:	20000014 	.word	0x20000014

08003e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x30>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eaa:	e027      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eae:	613b      	str	r3, [r7, #16]
      break;
 8003eb0:	e027      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eca:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0c5b      	lsrs	r3, r3, #17
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ede:	fb03 f202 	mul.w	r2, r3, r2
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e004      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	613b      	str	r3, [r7, #16]
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	693b      	ldr	r3, [r7, #16]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	007a1200 	.word	0x007a1200
 8003f18:	080051cc 	.word	0x080051cc
 8003f1c:	080051dc 	.word	0x080051dc
 8003f20:	003d0900 	.word	0x003d0900

08003f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <RCC_Delay+0x34>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <RCC_Delay+0x38>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a5b      	lsrs	r3, r3, #9
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f40:	bf00      	nop
  }
  while (Delay --);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	60fa      	str	r2, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f9      	bne.n	8003f40 <RCC_Delay+0x1c>
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	10624dd3 	.word	0x10624dd3

08003f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d07d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f80:	4b4f      	ldr	r3, [pc, #316]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b49      	ldr	r3, [pc, #292]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	4b46      	ldr	r3, [pc, #280]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d118      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb4:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc0:	f7fd ff9c 	bl	8001efc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	e008      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fd ff98 	bl	8001efc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e06d      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b3a      	ldr	r3, [pc, #232]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe6:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02e      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d027      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004004:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800400e:	4b2e      	ldr	r3, [pc, #184]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004014:	4b2c      	ldr	r3, [pc, #176]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800401a:	4a29      	ldr	r2, [pc, #164]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d014      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fd ff67 	bl	8001efc <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fd ff63 	bl	8001efc <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e036      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004054:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4917      	ldr	r1, [pc, #92]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	4313      	orrs	r3, r2
 8004064:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406c:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4a13      	ldr	r2, [pc, #76]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004084:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	490b      	ldr	r1, [pc, #44]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4904      	ldr	r1, [pc, #16]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42420440 	.word	0x42420440

080040cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e041      	b.n	8004162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fdac 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fcfe 	bl	8004b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e041      	b.n	8004200 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f839 	bl	8004208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fcaf 	bl	8004b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
	...

0800421c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x24>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e022      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d109      	bne.n	800425a <HAL_TIM_PWM_Start+0x3e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e015      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d109      	bne.n	8004274 <HAL_TIM_PWM_Start+0x58>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e008      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e05e      	b.n	800434c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0x82>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800429c:	e013      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0x92>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fea8 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <HAL_TIM_PWM_Start+0x138>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <HAL_TIM_PWM_Start+0x138>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <HAL_TIM_PWM_Start+0xfa>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d009      	beq.n	8004316 <HAL_TIM_PWM_Start+0xfa>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <HAL_TIM_PWM_Start+0x13c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_TIM_PWM_Start+0xfa>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a12      	ldr	r2, [pc, #72]	@ (800435c <HAL_TIM_PWM_Start+0x140>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b06      	cmp	r3, #6
 8004326:	d010      	beq.n	800434a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	e007      	b.n	800434a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800

08004360 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e093      	b.n	800449c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fd fc7d 	bl	8001c88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f000 fba9 	bl	8004b0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	4313      	orrs	r3, r2
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004400:	f023 030c 	bic.w	r3, r3, #12
 8004404:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800440c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	4313      	orrs	r3, r2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	031b      	lsls	r3, r3, #12
 8004430:	4313      	orrs	r3, r2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4313      	orrs	r3, r2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d102      	bne.n	80044e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044da:	7b7b      	ldrb	r3, [r7, #13]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e069      	b.n	80045b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f4:	e031      	b.n	800455a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d110      	bne.n	800451e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004502:	7b3b      	ldrb	r3, [r7, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d001      	beq.n	800450c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e055      	b.n	80045b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800451c:	e01d      	b.n	800455a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d108      	bne.n	8004536 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800452a:	7b7b      	ldrb	r3, [r7, #13]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004530:	7b3b      	ldrb	r3, [r7, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e03e      	b.n	80045b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_TIM_Encoder_Start+0xc4>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d008      	beq.n	8004578 <HAL_TIM_Encoder_Start+0xd4>
 8004566:	e00f      	b.n	8004588 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd57 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 8004576:	e016      	b.n	80045a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	2104      	movs	r1, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd4f 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 8004586:	e00e      	b.n	80045a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fd47 	bl	8005024 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	2104      	movs	r1, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fd40 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 80045a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d020      	beq.n	8004624 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0202 	mvn.w	r2, #2
 80045f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa63 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa56 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa65 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d020      	beq.n	8004670 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01b      	beq.n	8004670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0204 	mvn.w	r2, #4
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa3d 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa30 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa3f 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d020      	beq.n	80046bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0208 	mvn.w	r2, #8
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa17 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa0a 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa19 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0210 	mvn.w	r2, #16
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2208      	movs	r2, #8
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9f1 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9e4 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9f3 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0201 	mvn.w	r2, #1
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9c3 	bl	8004ab2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fcf5 	bl	800513a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9c3 	bl	8004afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0220 	mvn.w	r2, #32
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fcc8 	bl	8005128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ae      	b.n	800491c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f200 809f 	bhi.w	800490c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004809 	.word	0x08004809
 80047d8:	0800490d 	.word	0x0800490d
 80047dc:	0800490d 	.word	0x0800490d
 80047e0:	0800490d 	.word	0x0800490d
 80047e4:	08004849 	.word	0x08004849
 80047e8:	0800490d 	.word	0x0800490d
 80047ec:	0800490d 	.word	0x0800490d
 80047f0:	0800490d 	.word	0x0800490d
 80047f4:	0800488b 	.word	0x0800488b
 80047f8:	0800490d 	.word	0x0800490d
 80047fc:	0800490d 	.word	0x0800490d
 8004800:	0800490d 	.word	0x0800490d
 8004804:	080048cb 	.word	0x080048cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f9ea 	bl	8004be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
      break;
 8004846:	e064      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fa30 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]
      break;
 8004888:	e043      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fa79 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0208 	orr.w	r2, r2, #8
 80048a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0204 	bic.w	r2, r2, #4
 80048b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	61da      	str	r2, [r3, #28]
      break;
 80048c8:	e023      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fac3 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	021a      	lsls	r2, r3, #8
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]
      break;
 800490a:	e002      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
      break;
 8004910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x1c>
 800493c:	2302      	movs	r3, #2
 800493e:	e0b4      	b.n	8004aaa <HAL_TIM_ConfigClockSource+0x186>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800495e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004978:	d03e      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0xd4>
 800497a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497e:	f200 8087 	bhi.w	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004986:	f000 8086 	beq.w	8004a96 <HAL_TIM_ConfigClockSource+0x172>
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498e:	d87f      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b70      	cmp	r3, #112	@ 0x70
 8004992:	d01a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0xa6>
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d87b      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b60      	cmp	r3, #96	@ 0x60
 800499a:	d050      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x11a>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d877      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b50      	cmp	r3, #80	@ 0x50
 80049a2:	d03c      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xfa>
 80049a4:	2b50      	cmp	r3, #80	@ 0x50
 80049a6:	d873      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b40      	cmp	r3, #64	@ 0x40
 80049aa:	d058      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x13a>
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d86f      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b30      	cmp	r3, #48	@ 0x30
 80049b2:	d064      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	2b30      	cmp	r3, #48	@ 0x30
 80049b6:	d86b      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d060      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d867      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05c      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d05a      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	e062      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049da:	f000 fb04 	bl	8004fe6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	609a      	str	r2, [r3, #8]
      break;
 80049f6:	e04f      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a08:	f000 faed 	bl	8004fe6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1a:	609a      	str	r2, [r3, #8]
      break;
 8004a1c:	e03c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 fa64 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2150      	movs	r1, #80	@ 0x50
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fabb 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e02c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fa82 	bl	8004f54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2160      	movs	r1, #96	@ 0x60
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 faab 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e01c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fa44 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2140      	movs	r1, #64	@ 0x40
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa9b 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f000 fa92 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a8e:	e003      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e000      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004bdc <TIM_Base_SetConfig+0xd0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004be0 <TIM_Base_SetConfig+0xd4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	@ (8004be4 <TIM_Base_SetConfig+0xd8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a22      	ldr	r2, [pc, #136]	@ (8004bdc <TIM_Base_SetConfig+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <TIM_Base_SetConfig+0xd4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <TIM_Base_SetConfig+0xd8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <TIM_Base_SetConfig+0xd0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	611a      	str	r2, [r3, #16]
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f023 0201 	bic.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0302 	bic.w	r3, r3, #2
 8004c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10c      	bne.n	8004c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0308 	bic.w	r3, r3, #8
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d111      	bne.n	8004c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 0210 	bic.w	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a14      	ldr	r2, [pc, #80]	@ (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d113      	bne.n	8004e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef4 <TIM_OC4_SetConfig+0x98>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	40012c00 	.word	0x40012c00

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f043 0307 	orr.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b087      	sub	sp, #28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	021a      	lsls	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	431a      	orrs	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e046      	b.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a16      	ldr	r2, [pc, #88]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d0:	d009      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a12      	ldr	r2, [pc, #72]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a10      	ldr	r2, [pc, #64]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10c      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800

08005128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <memset>:
 800514c:	4603      	mov	r3, r0
 800514e:	4402      	add	r2, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <__libc_init_array>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	2600      	movs	r6, #0
 8005160:	4d0c      	ldr	r5, [pc, #48]	@ (8005194 <__libc_init_array+0x38>)
 8005162:	4c0d      	ldr	r4, [pc, #52]	@ (8005198 <__libc_init_array+0x3c>)
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	42a6      	cmp	r6, r4
 800516a:	d109      	bne.n	8005180 <__libc_init_array+0x24>
 800516c:	f000 f81a 	bl	80051a4 <_init>
 8005170:	2600      	movs	r6, #0
 8005172:	4d0a      	ldr	r5, [pc, #40]	@ (800519c <__libc_init_array+0x40>)
 8005174:	4c0a      	ldr	r4, [pc, #40]	@ (80051a0 <__libc_init_array+0x44>)
 8005176:	1b64      	subs	r4, r4, r5
 8005178:	10a4      	asrs	r4, r4, #2
 800517a:	42a6      	cmp	r6, r4
 800517c:	d105      	bne.n	800518a <__libc_init_array+0x2e>
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	f855 3b04 	ldr.w	r3, [r5], #4
 8005184:	4798      	blx	r3
 8005186:	3601      	adds	r6, #1
 8005188:	e7ee      	b.n	8005168 <__libc_init_array+0xc>
 800518a:	f855 3b04 	ldr.w	r3, [r5], #4
 800518e:	4798      	blx	r3
 8005190:	3601      	adds	r6, #1
 8005192:	e7f2      	b.n	800517a <__libc_init_array+0x1e>
 8005194:	080051e0 	.word	0x080051e0
 8005198:	080051e0 	.word	0x080051e0
 800519c:	080051e0 	.word	0x080051e0
 80051a0:	080051e4 	.word	0x080051e4

080051a4 <_init>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

080051b0 <_fini>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr
